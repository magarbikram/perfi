// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Perfi.Infrastructure.Database;

#nullable disable

namespace Perfi.Infrastructure.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20221202173924_ChangeParentColumnNameInAccount")]
    partial class ChangeParentColumnNameInAccount
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Perfi.Core.Accounts.AccountAggregate.Account", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("AccountCategory")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)");

                    b.Property<string>("Number")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<int?>("ParentAccountId")
                        .HasColumnType("integer");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("AccountCategory");

                    b.HasIndex("Number")
                        .IsUnique();

                    b.HasIndex("ParentAccountId");

                    b.ToTable("Account", (string)null);

                    b.HasDiscriminator<string>("Type").HasValue("Account");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Perfi.Core.Accounts.CashAccountAggregate.CashAccount", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("AssociatedAccountNumber")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("BankName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)");

                    b.HasKey("Id");

                    b.ToTable("CashAccount", (string)null);
                });

            modelBuilder.Entity("Perfi.Core.Accounts.AccountAggregate.SummaryAccount", b =>
                {
                    b.HasBaseType("Perfi.Core.Accounts.AccountAggregate.Account");

                    b.ToTable("Account", (string)null);

                    b.HasDiscriminator().HasValue("Summary");
                });

            modelBuilder.Entity("Perfi.Core.Accounts.AccountAggregate.TransactionalAccount", b =>
                {
                    b.HasBaseType("Perfi.Core.Accounts.AccountAggregate.Account");

                    b.HasDiscriminator().HasValue("Transactional");
                });

            modelBuilder.Entity("Perfi.Core.Accounts.AccountAggregate.Account", b =>
                {
                    b.HasOne("Perfi.Core.Accounts.AccountAggregate.SummaryAccount", null)
                        .WithMany("Components")
                        .HasForeignKey("ParentAccountId");
                });

            modelBuilder.Entity("Perfi.Core.Accounts.AccountAggregate.SummaryAccount", b =>
                {
                    b.Navigation("Components");
                });
#pragma warning restore 612, 618
        }
    }
}
